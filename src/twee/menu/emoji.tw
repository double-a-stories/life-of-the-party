:: Twemoji [script]
// Load Twemoji script
// NOTE: Any emoji character inside a passage will be replaced with <img src="...">. If there are emojis inside of double-quotes, it WILL BREAK the surrounding code.

// BAD: <%s.rm?"⚠️":"⚠️"%>
// OK: <%s.rm?`⚠️:`⚠️`%>

 // Use 72x72 png graphics, since they're slightly smaller.
twemoji.base = "https://twemoji.maxcdn.com/v/latest/";

/*
// Override Snowman passage render function to also parse Twemojis
const passageRender = Passage.prototype.render;
Passage.prototype.render = function(source) {
  if (!(typeof source !== 'undefined' && source !== null)) {
      // Assume that 'this.source' is the correct source
      source = this.source;
  }
  const template = document.createElement('template');
  // Render the HTML internally.
  template.innerHTML = passageRender.apply(this, arguments);
  // Use Twemoji to parse the DOM object and insert emojis.
  twemoji.parse(template.content);
  // Convert the passage back into raw HTML.
  return template.innerHTML;
}
*/

$(window).on("sm.passage.shown", function parsePassageEmojis() {
  twemoji.parse(story.$passageEl[0]);
})

function defaultImageSrcGenerator(emoji) {
  // remove variation selectors to avoid a quirk.
  return ''.concat(twemoji.base, twemoji.size, '/', twemoji.convert.toCodePoint(emoji), twemoji.ext);
}

// Given a passage of text, pulls out the emoji symbols in that text.
const scrapeEmojiFromString = (text) => {
  let foundEmojis = new Set();
  twemoji.replace(text, (emoji) => {
    // generate URL
    emoji = emoji.indexOf('\u200D') < 0 ?
          emoji.replace(/\uFE0F/gu, '') : emoji;
    if (emoji)
      foundEmojis.add(emoji);
  });
  return foundEmojis;
}

const preloadedEmoji = window.preloadedEmoji = new Set();
setup.preloadEmoji = (nameOrId) => {
  let p = story.passage(nameOrId);
  if (p == null) throw new Error("No passage named " + p);
  if (p.scrapedEmoji == true) return;
  const foundEmojis = scrapeEmojiFromString(p.source);
  for (const emoji of foundEmojis) {
    if (!(emoji in preloadedEmoji)) {
      const link = document.createElement("link");
      link.rel = "preload";
      link.as = "image";
      link.href = defaultImageSrcGenerator(emoji)
      link.dataset.emoji = emoji;
      $("head").append(link);
      preloadedEmoji.add(emoji);
    }
  }
  p.scrapedEmoji = true;
  return foundEmojis;
}

$(window).on("sm.passage.shown", function preloadEmojisFromLinks() {
  $("a[data-passage]").each(function() {
    setup.preloadEmoji(this.dataset.passage);
  })
});

:: Twemoji style [stylesheet]
.emoji {
  width: 1em;
  height: 1em;
  vertical-align: -0.1em;
  font-size: 1.2em;
}

